import pathlib
import os
import getpass
import base64
import secrets
import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt



#derriving a key from the the password
def generate_salt(size=16):
    """
    Generate the salt used for key derivation,
`size` is the length of the salt to generate
    """
    return secrets.token_bytes(size)


#function to derive the key from password and salt
# salt, length= desired length of the key
# n= cpu/memory cost parameter,must be larger than 1 to power of 2
# r= block size parameter
#p = parallization parameter
def derive_key():
    """ derive thr key from the 'password' and passed from 'salt' """
    kdf = Scrypt(salt=salt, length=32, n=2**14, r=8, p=1)
    return kdf.derive(password, encode()) 

# function to load previously generated salt
def load_salt():
    return open("salt.salt", "rb").read()

#core function that generate the key from the password
def generate_key(password, salt_size=16, load_existing_salt=False, save_salt=True):
    """Generates a key from a `password` and the salt.
    If `load_existing_salt` is True, it'll load the salt from a file
    in the current directory called "salt.salt".
    If `save_salt` is True, then it will generate a new salt
    and save it to "salt.salt"""

    if load_existing_salt:
        salt = load_salt()
    elif save_salt:
        #generate new salt and save it
        salt = generate_salt(salt_size)
        with open("salt.salt", "wb") as salt_file:
            salt_file.write(salt)
    #generate the key from the password and salt
    derived_key = derive_key()
    # encode it using base 64 and return it
    return base64.urlsafe_b64encode(derived_key)


#FILE ENCRYPTION
def encrypt(filename, key):
    """Given a filename (str) and key (bytes), it encrypts the file and write it """
    f = Fernet(key)
    with open(filename, "rb") as file:
        #read all file data
        file_data = file.read()
    #encryp all data
    encrypted_data = f.encrypt(file_data)
    #write the encypted file data
    with open(filename, "wb") as file:
        file.write(encrypted_data)


def decrypt(filename, key):
    """Given a filename (str) and key (bytes), it decrypts the file and write
    it"""
    f = Fernet(key)
    with open(filename, "rb") as file:
    # read the encrypted data
        encrypted_data = file.read()
    # decrypt data
    try:
        decrypted_data = f.decrypt(encrypted_data)
    except cryptography.fernet.InvalidToken:
        print("[!] Invalid token, most likely the password is incorrect")
    return
    # write the original file
    with open(filename, "wb") as file:
        file.write(decrypted_data)


#encrypting folders or entire computer system
def encrypt_folder():
    #if its  a folder encrypt the entired folders i.e containg all files
    for child in pathlib.path(foldername).glob("."):
        if child.is_file():
            print(f"[*] encrypting {child}")
            encrypt(child, key)
        elif child.is_dir():
            encrypt_folder(child, key)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="file encyption scrypt with password")
    parser.add_argument("path", help="path to decrypt or encrypt can be a file or entire folder")
    parser.add_argument("-s", "--salt-size", help="if this is set a new salt with passed salt is generate",type=int)

    parser.add_argument("-e", "--encrypt", action="store_true",
    help="Whether to encrypt the file/folder, only -e or-d can be specified.")
    parser.add_argument("-d", "--decrypt", action="store_true",help="Whether to decrypt the file/folder, only -e or-d can be specified.")
    args = parser.parse_args()
    if args.encrypt:
        password = getpass.getpass("Enter the password for encryption: ")
    elif args.decrypt:
        password = getpass.getpass("Enter the password you used forencryption: ")
    if args.salt_size:
        key = generate_key(password, salt_size=args.salt_size, save_salt=True)
    else:
        key = generate_key(password, load_existing_salt=True)
    encrypt_ = args.encrypt
    decrypt_ = args.decrypt
    if encrypt_ and decrypt_:
        raise TypeError("Please specify whether you want to encrypt the fileor decrypt it.")
    elif encrypt_:
        if os.path.isfile(args.path):
    # if it is a file, encrypt it
            encrypt(args.path, key)
        elif os.path.isdir(args.path):
            encrypt_folder(args.path, key)
    elif decrypt_:
        if os.path.isfile(args.path):
            decrypt(args.path, key)
    elif os.path.isdir(args.path):
        decrypt_folder(args.path, key)
    else:
        raise TypeError("Please specify whether you want to encrypt the file or decrypt")


    


